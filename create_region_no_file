#!/usr/bin/env python
""" Extended create_region tool
* Create a region without a points.txt file
* Control the path and name of the output regional grid and graph.info files
* Personalize the number of buffer layers added to the described region

Based on create_region
TODO not all options tested yet

Modifications by Marta Gil Bardaj√≠ 13/5/22 marta.gil@vortexfdc.com


Example usage:
* Same behaviour as create_region.
    Needs to add "--points" before the name of the points file:

        python create_region_no_file global.grid.nc --points points.txt

* Want to control the path where the region is stored?
    Use --oregion and --ograph. If we do specify --oregion, but not
    --ograph the graph info will automatically be set to
    ograph = oregion.replace(".nc", "") + ".graph.info"'

        python create_region_no_file global.grid.nc
            --points points.txt --oregion tmp2/myregion

* Want to pass the "points.txt" arguments directly?

    Don't pass a --points file and include all the needed details
    to specify your region in the command. The syntax is region.<namearg>:<valuearg>
    where <valuearg> is a single string, a float or a list of
    comma-separated floats (depending on the <namearg>.
    For example:

        python create_region_no_file global.grid.nc region.type:circle
            region.radius:200000 region.in_point:45,128

    will create a circular region of 200km radius centered at
    latitude 45 and longitude 128.

* Want to define a region that already includes the buffer region?

    Pass a --num_boundary_layers value.

        python create_region_no_file global.grid.nc region.type:circle
            region.radius:500000 region.in_point:0,0 --num_boundary_layers=0

"""
from __future__ import absolute_import, division, print_function
import argparse
from limited_area.limited_area import LimitedArea
import os

if __name__ == "__main__":
    description = ("Create a limited area MPAS grid from a global MPAS grid"
                   " and a file that specifies the regional area boundary,"
                   " or passing the arguments that define the region "
                   " using the format region.<namearg>:<valuearg>. For "
                   " example, adding: region.type:circle region.radius:200000 "
                   " region.in_point:45,128 will create a circular region"
                   " of 200km radius centered at latitude 45, longitude 128.")

    epilog = ("For more information please see: "
             "https://github.com/MiCurry/MPAS-Limited-Area")

    parser = argparse.ArgumentParser(description=description,
                                     epilog=epilog)

    parser.add_argument('grid',
                        help=('Global MPAS grid file. Either a grid.nc or'
                              ' static.nc file'),
                        type=str)

    parser.add_argument('--points', default=None,
                        help='Points file specifying the MPAS regional area',
                        type=str)

    parser.add_argument('--num_boundary_layers', default=None,
                        help='Number of layers to add as buffer (outside '
                             'the region you specified). Not setting '
                             'this option means that the default value '
                             'of the LimitedArea class will be unchanged. '
                             'This is currently 8, and passing a lower '
                             'value will give a warning.',
                        type=int)

    parser.add_argument('--oregion', default=None,
                        help=('Output name of the regional MPAS grid file '
                              'that we will create. If we do not specify '
                              '--ograph, it will automatically be set to '
                              'ograph = oregion.replace(".nc", "") + '
                              '".graph.info"'),
                        type=str)

    parser.add_argument('--ograph', default=None,
                        help=('Output name of the regional graph.info file '
                              'that we will create. Will be ignored if '
                              'we did not specify --oregion.'),
                        type=str)

    parser.add_argument('-v', '--verbose',
                        help='Turn on verbose setting 0-5',
                        type=int,
                        default=0)

    args, unknown = parser.parse_known_args()
    print(args)

    new_args = {}
    for st in unknown:
        k, v = st.split(':')
        new_args[k] = v
    print(new_args)

    DEBUG = args.verbose
    if DEBUG > 0:
        print("DEBUG: DEBUG set to verbose level ", DEBUG, '\n')

    if DEBUG > 1:
        print("DEBUG: Grid File: ", args.grid)
        print("DEBUG: Points File: ", args.points)

    kwargs = {'DEBUG': DEBUG, **new_args}

    if args.num_boundary_layers is not None:
        kwargs['num_boundary_layers'] = int(args.num_boundary_layers)

    print(kwargs)

    regional_area = LimitedArea(args.grid,
                                None,
                                format='NETCDF3_64BIT_OFFSET',
                                **kwargs)

    region_fname, graph_fname = regional_area.gen_region(**kwargs)

    if DEBUG > 0:
        print("DEBUG: Limited Area Creation Finished")

    oregion = args.oregion
    ograph = args.ograph

    if oregion is not None:
        pathregion = os.path.dirname(oregion)
        os.system('mkdir -p ' + pathregion)
        os.system('mv ' + region_fname + ' ' + oregion)
        print('Region available in ' + oregion)
        if ograph is None:
            ograph = oregion.replace('.nc', '') + '.graph.info'
        pathgraph = os.path.dirname(ograph)
        os.system('mkdir -p ' + pathgraph)
        os.system('mv ' + graph_fname + ' ' + ograph)
        print('Graph.info available in ' + ograph)
    else:
        print('Region available in ' + region_fname)
        print('Graph.info available in ' + graph_fname)
