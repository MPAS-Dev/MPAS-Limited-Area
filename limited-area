#!/usr/bin/env python

from LimitedArea.LimitedArea import LimitedArea
import argparse

description = ("Create a limited area MPAS grid from a global MPAS grid "
              "and a file that specifies the limited area boundry or "
              "boundries.")

epilog = ("For more infromation please see: "
         "https://github.com/MiCurry/MPAS-Limited-Area")


parser = argparse.ArgumentParser(description=description,
                                 epilog=epilog)

required = parser.add_argument_group('Required', "Limited Area requires a "
                                                 "MPAS Grid as well as a "
                                                 "file specifying the "
                                                 "limited area.")

options = parser.add_argument_group('Options', "Options to generating the "
                                               "MPAS limited area. ")


required.add_argument('points', 
                      help='Points file specifying the MPAS regional area',
                      type=str)
required.add_argument('grid', 
                      help='Global MPAS Grid File',
                      nargs='+',
                      type=str)

options.add_argument('-o', '--output',
                     help='Regional grid output file name',
                     type=str,
                     default=None)
options.add_argument('-a', '--algorithm',
                     help='Algorithm to create regional MPAS grid',
                     type=str,
                     default='follow')
options.add_argument('-v', '--verbose',
                     help='Turn on verbose setting 0-5',
                     type=int,
                     default=0)

args, unkown = parser.parse_known_args()


DEBUG_VALUE = args.verbose
if  DEBUG_VALUE > 0 :
    print("DEBUG: DEBUG_VALUE set to ", DEBUG_VALUE, '\n')

if DEBUG_VALUE > 1 :
    print("DEBUG: Grid File: ", args.grid)
    print("DEBUG: Points File: ", args.points)
    print("DEBUG: Output: ", args.output)
    print("DEBUG: Algorithm: ", args.algorithm, '\n')


regional_area = LimitedArea(args.grid, 
                            args.points, 
                            output=args.output,
                            algorithm=args.algorithm,
                            DEBUG_VALUE=DEBUG_VALUE)

regional_area.gen_region()


if DEBUG_VALUE > 0:
    print("DEBUG: Limited Area Creation Finished")



