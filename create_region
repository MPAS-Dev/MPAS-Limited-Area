#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import argparse
from limited_area.limited_area import LimitedArea

if __name__ == "__main__":
    description = ("Create regional subsets of global MPAS meshes using "
                   "a regional specification .pts file that specifies the "
                   "regions boundary.")

    epilog = ("For more information please see: "
             "https://github.com/MiCurry/MPAS-Limited-Area")


    parser = argparse.ArgumentParser(description=description,
                                     epilog=epilog)

    required_description = ("create_region requires a MPAS mesh file that "
                            "contains mesh connectivity fields and a file for "
                            "specifying a regional area (.pts file). ")

    required = parser.add_argument_group('Required', required_description)

    options = parser.add_argument_group('Options')

    required.add_argument('points',
                          help='Points file specifying the MPAS regional area',
                          type=str)
    required.add_argument('files',
                          help=('Global MPAS file(s) to be subset. If multiple '
                          'meshes are given, the first must contain mesh '
                          'connectivity infromation that will be used to '
                          'subset all files.'),
                          nargs='+',
                          type=str)

    options.add_argument('-v', '--verbose',
                         help='Turn on verbose setting 0-5',
                         type=int,
                         default=0)

    args, unkown = parser.parse_known_args()


    DEBUG = args.verbose
    if  DEBUG > 0:
        print("DEBUG: DEBUG set to verbose level ", DEBUG, '\n')

    if DEBUG > 1:
        print("DEBUG: Mesh Files: ", args.files)
        print("DEBUG: Points File: ", args.points)


    kwargs = { 'DEBUG' : DEBUG }

    regional_area = LimitedArea(args.files,
                                args.points,
                                format='NETCDF3_64BIT_OFFSET',
                                **kwargs)

    regional_area.gen_region(**kwargs)


    if DEBUG > 0:
        print("DEBUG: Limited Area Creation Finished")



